This project exists to explore test-driven behavior development

    with a simple android java-based application.

    This project is NOT a working android game.



The code is a product of using bdd to

    work a fun problem while test-driven

    capture needs in gherkin-style unit tests

    solve the need with loosely coupled, lean, solid, dry, service oriented java code



Building the behavior of a terrarium-style virtual world

    no gui except code-generated empty settings

    focus is on unit tests, behavior specs

    build services for the virtual world



This example shows separation of java classes into model and service classes.

    Models have state and carry properties, only

        created with new

        no behavior except getters/setters

            which require unit tests -- stupid java!!  >:-|

    Services perform needed action on model objects, loosely coupled to other services, consumers

        code to interface

        create from provider

        behavior requires tests

        services are lean, solid, dry

    Code kept lean, solid, and dry

        quality: to behave as needed

        minimal solution code to meet spec

        uncle bob compliant

        don't repeat yourself

    Practicing test-driven

        imaginary list of needs drives gherkin-style use-cases for each spec

        behavior driven specs defined before solution code is written

        nouns and verbs: transforming needs into data objects and services

        red, green, refactor